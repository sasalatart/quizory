/* tslint:disable */
/* eslint-disable */
/**
 * AI Generated Questions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnswersLogItem,
  SubmitAnswerRequest,
  SubmitAnswerResult,
  UnansweredQuestion,
} from '../models/index';
import {
    AnswersLogItemFromJSON,
    AnswersLogItemToJSON,
    SubmitAnswerRequestFromJSON,
    SubmitAnswerRequestToJSON,
    SubmitAnswerResultFromJSON,
    SubmitAnswerResultToJSON,
    UnansweredQuestionFromJSON,
    UnansweredQuestionToJSON,
} from '../models/index';

export interface GetAnswersLogRequest {
    userId: string;
    page?: number;
    pageSize?: number;
}

export interface SubmitAnswerOperationRequest {
    submitAnswerRequest: SubmitAnswerRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns the paginated log of all answers submitted by the user.
     */
    async getAnswersLogRaw(requestParameters: GetAnswersLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AnswersLogItem>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAnswersLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}/answers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnswersLogItemFromJSON));
    }

    /**
     * Returns the paginated log of all answers submitted by the user.
     */
    async getAnswersLog(requestParameters: GetAnswersLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AnswersLogItem>> {
        const response = await this.getAnswersLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the next question that a user should answer.
     */
    async getNextQuestionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnansweredQuestion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/questions/next`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnansweredQuestionFromJSON(jsonValue));
    }

    /**
     * Returns the next question that a user should answer.
     */
    async getNextQuestion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnansweredQuestion | null | undefined > {
        const response = await this.getNextQuestionRaw(initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Checks if the service is up and ready to receive requests.
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health-check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checks if the service is up and ready to receive requests.
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.healthCheckRaw(initOverrides);
    }

    /**
     * Registers the choice made by a user for a specific question, and returns the correct choice for it, plus some more info for the user to know how they did. 
     */
    async submitAnswerRaw(requestParameters: SubmitAnswerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitAnswerResult>> {
        if (requestParameters['submitAnswerRequest'] == null) {
            throw new runtime.RequiredError(
                'submitAnswerRequest',
                'Required parameter "submitAnswerRequest" was null or undefined when calling submitAnswer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/answers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitAnswerRequestToJSON(requestParameters['submitAnswerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmitAnswerResultFromJSON(jsonValue));
    }

    /**
     * Registers the choice made by a user for a specific question, and returns the correct choice for it, plus some more info for the user to know how they did. 
     */
    async submitAnswer(requestParameters: SubmitAnswerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitAnswerResult> {
        const response = await this.submitAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
