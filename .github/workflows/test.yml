name: test
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_URL: postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'pnpm'
          cache-dependency-path: client/pnpm-lock.yaml

      - name: Check for dirty git
        run: |
          make install
          make migrate
          make codegen
          git diff --exit-code

      - name: Build
        run: make build

      - name: Test
        run: make test-ci

      - name: Parse and extract coverage for all packages
        id: parse-coverage
        run: |
          echo "| Package | Coverage |" > coverage_report.md
          echo "| ------- | -------- |" >> coverage_report.md
          while IFS= read -r line; do
            package=$(echo $line | cut -d ' ' -f 1)
            coverage=$(echo $line | cut -d ' ' -f 2)
            echo "| $package | $coverage |" >> coverage_report.md
          done < coverage.out

      - name: Post coverage report to PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('coverage_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
