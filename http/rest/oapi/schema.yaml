openapi: '3.0.0'
info:
  version: 1.0.0
  title: Quizory
  description: LLM-Generated history questions to test your knowledge.
servers:
  - url: https://quizory-api.salatart.com

security:
  - BearerAuth: []

paths:
  /health-check:
    get:
      tags: [Infra]
      operationId: healthCheck
      description: Checks if the service is up and ready to receive requests.
      responses:
        204:
          description: The service is healthy.
        503:
          description: The service is unhealthy.
      security: []

  /questions/remaining-topics:
    get:
      tags: [Questions]
      operationId: getRemainingTopics
      description: >
        Returns the list of topics with questions still unanswered by the user making the request.
        Each of these topics comes with the actual amount of questions left to answer.
      responses:
        200:
          description: The list of topics with unanswered questions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemainingTopic'

  /questions/next:
    get:
      tags: [Questions]
      operationId: getNextQuestion
      description: Returns the next question that a user should answer for the specified topic.
      parameters:
        - $ref: '#/components/parameters/TopicQueryParam'
      responses:
        200:
          description: The next question that a user should answer for the specified topic.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnansweredQuestion'
        204:
          description: No more questions to answer.

  /answers:
    post:
      tags: [Answers]
      operationId: submitAnswer
      description: >
        Registers the choice made by a user for a specific question, and returns the correct
        choice for it, plus some more info for the user to know how they did.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitAnswerRequest'
      responses:
        201:
          description: The answer was submitted. Includes the ID of the correct choice and more info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitAnswerResult'

  /users/{userId}/answers:
    get:
      tags: [Answers]
      operationId: getAnswersLog
      description: Returns the paginated log of all answers submitted by the user.
      parameters:
        - $ref: '#/components/parameters/UserIdQueryParam'
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
      responses:
        200:
          description: The log of all answers submitted by the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswersLogItem'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserIdQueryParam:
      name: userId
      in: path
      description: The ID of the user.
      required: true
      schema:
        $ref: '#/components/schemas/UUID'

    PageQueryParam:
      name: page
      in: query
      description: The page number to retrieve (index starts at 0).
      required: false
      schema:
        type: integer
        minimum: 1
        default: 0

    PageSizeQueryParam:
      name: pageSize
      in: query
      description: The number of items per page.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 25

    TopicQueryParam:
      name: topic
      in: query
      required: true
      schema:
        type: string
      example: ancient greece

  schemas:
    UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000

    RemainingTopic:
      type: object
      required:
        - topic
        - amountOfQuestions
      properties:
        topic:
          type: string
          example: ancient greece
        amountOfQuestions:
          type: integer
          minimum: 0
          example: 5

    Question:
      type: object
      required:
        - id
        - topic
        - question
        - hint
        - moreInfo
        - difficulty
        - choices
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        topic:
          type: string
          example: ancient greece
        question:
          type: string
          example: In Ancient Greece, what was the Agora?
        hint:
          type: string
          example: It was not just a place for shopping but also for democracy and discussion.
        moreInfo:
          type: string
          example: >
            The Agora was central to ancient Greek city-states, notably Athens. This area served as
            the heart of public life, where citizens gathered not only to buy and sell goods but
            also to discuss politics, philosophy, and current events, highlighting the deeply
            democratic and societal nature of spaces in ancient Greek urban planning.
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'

    Choice:
      type: object
      required:
        - id
        - choice
        - isCorrect
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        choice:
          type: string
          example: A marketplace and public square
        isCorrect:
          type: boolean
          example: true

    UnansweredQuestion:
      type: object
      required:
        - id
        - topic
        - question
        - hint
        - difficulty
        - choices
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        topic:
          type: string
          example: ancient greece
        question:
          type: string
          example: In Ancient Greece, what was the Agora?
        hint:
          type: string
          example: It was not just a place for shopping but also for democracy and discussion.
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/UnansweredChoice'

    Difficulty:
      type: string
      enum:
        - DifficultyNoviceHistorian
        - DifficultyAvidHistorian
        - DifficultyHistoryScholar
      example: DifficultyNoviceHistorian

    UnansweredChoice:
      type: object
      required:
        - id
        - choice
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        choice:
          type: string
          example: A marketplace and public square

    SubmitAnswerRequest:
      type: object
      required:
        - choiceId
      properties:
        choiceId:
          $ref: '#/components/schemas/UUID'

    SubmitAnswerResult:
      type: object
      required:
        - id
        - correctChoiceId
        - moreInfo
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        correctChoiceId:
          $ref: '#/components/schemas/UUID'
        moreInfo:
          type: string
          example: >
            The Agora was central to ancient Greek city-states, notably Athens. This area served as
            the heart of public life, where citizens gathered not only to buy and sell goods but
            also to discuss politics, philosophy, and current events, highlighting the deeply
            democratic and societal nature of spaces in ancient Greek urban planning.

    AnswersLogItem:
      type: object
      description: A past attempt from a user to answer a question.
      required:
        - id
        - question
        - choiceId
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        question:
          $ref: '#/components/schemas/Question'
        choiceId:
          $ref: '#/components/schemas/UUID'
