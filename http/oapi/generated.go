// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gofiber/fiber/v2"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Difficulty.
const (
	DifficultyAvidHistorian   Difficulty = "DifficultyAvidHistorian"
	DifficultyHistoryScholar  Difficulty = "DifficultyHistoryScholar"
	DifficultyNoviceHistorian Difficulty = "DifficultyNoviceHistorian"
)

// Difficulty defines model for Difficulty.
type Difficulty string

// SubmitAnswerRequest defines model for SubmitAnswerRequest.
type SubmitAnswerRequest struct {
	ChoiceId UUID `json:"choiceId"`
}

// SubmitAnswerResult defines model for SubmitAnswerResult.
type SubmitAnswerResult struct {
	CorrectChoiceId UUID   `json:"correctChoiceId"`
	Id              UUID   `json:"id"`
	MoreInfo        string `json:"moreInfo"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// UnansweredChoice defines model for UnansweredChoice.
type UnansweredChoice struct {
	Choice string `json:"choice"`
	Id     UUID   `json:"id"`
}

// UnansweredQuestion defines model for UnansweredQuestion.
type UnansweredQuestion struct {
	Choices    []UnansweredChoice `json:"choices"`
	Difficulty Difficulty         `json:"difficulty"`
	Hint       string             `json:"hint"`
	Id         UUID               `json:"id"`
	Question   string             `json:"question"`
	Topic      string             `json:"topic"`
}

// SubmitAnswerJSONRequestBody defines body for SubmitAnswer for application/json ContentType.
type SubmitAnswerJSONRequestBody = SubmitAnswerRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SubmitAnswerWithBody request with any body
	SubmitAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitAnswer(ctx context.Context, body SubmitAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNextQuestion request
	GetNextQuestion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SubmitAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitAnswerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitAnswer(ctx context.Context, body SubmitAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitAnswerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNextQuestion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNextQuestionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSubmitAnswerRequest calls the generic SubmitAnswer builder with application/json body
func NewSubmitAnswerRequest(server string, body SubmitAnswerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitAnswerRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitAnswerRequestWithBody generates requests for SubmitAnswer with any type of body
func NewSubmitAnswerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNextQuestionRequest generates requests for GetNextQuestion
func NewGetNextQuestionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/questions/next")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SubmitAnswerWithBodyWithResponse request with any body
	SubmitAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitAnswerResponse, error)

	SubmitAnswerWithResponse(ctx context.Context, body SubmitAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitAnswerResponse, error)

	// GetNextQuestionWithResponse request
	GetNextQuestionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNextQuestionResponse, error)
}

type SubmitAnswerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubmitAnswerResult
}

// Status returns HTTPResponse.Status
func (r SubmitAnswerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitAnswerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNextQuestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnansweredQuestion
}

// Status returns HTTPResponse.Status
func (r GetNextQuestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNextQuestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SubmitAnswerWithBodyWithResponse request with arbitrary body returning *SubmitAnswerResponse
func (c *ClientWithResponses) SubmitAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitAnswerResponse, error) {
	rsp, err := c.SubmitAnswerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitAnswerResponse(rsp)
}

func (c *ClientWithResponses) SubmitAnswerWithResponse(ctx context.Context, body SubmitAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitAnswerResponse, error) {
	rsp, err := c.SubmitAnswer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitAnswerResponse(rsp)
}

// GetNextQuestionWithResponse request returning *GetNextQuestionResponse
func (c *ClientWithResponses) GetNextQuestionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNextQuestionResponse, error) {
	rsp, err := c.GetNextQuestion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNextQuestionResponse(rsp)
}

// ParseSubmitAnswerResponse parses an HTTP response from a SubmitAnswerWithResponse call
func ParseSubmitAnswerResponse(rsp *http.Response) (*SubmitAnswerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitAnswerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubmitAnswerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetNextQuestionResponse parses an HTTP response from a GetNextQuestionWithResponse call
func ParseGetNextQuestionResponse(rsp *http.Response) (*GetNextQuestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNextQuestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnansweredQuestion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /answers)
	SubmitAnswer(c *fiber.Ctx) error

	// (GET /questions/next)
	GetNextQuestion(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// SubmitAnswer operation middleware
func (siw *ServerInterfaceWrapper) SubmitAnswer(c *fiber.Ctx) error {

	return siw.Handler.SubmitAnswer(c)
}

// GetNextQuestion operation middleware
func (siw *ServerInterfaceWrapper) GetNextQuestion(c *fiber.Ctx) error {

	return siw.Handler.GetNextQuestion(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/answers", wrapper.SubmitAnswer)

	router.Get(options.BaseURL+"/questions/next", wrapper.GetNextQuestion)

}
