// Code generated by "enumer -type=Difficulty -trimprefix=Difficulty -transform=whitespace"; DO NOT EDIT.

package question

import (
	"fmt"
	"strings"
)

const _DifficultyName = "novice historianavid historianhistory scholar"

var _DifficultyIndex = [...]uint8{0, 16, 30, 45}

const _DifficultyLowerName = "novice historianavid historianhistory scholar"

func (i Difficulty) String() string {
	if i < 0 || i >= Difficulty(len(_DifficultyIndex)-1) {
		return fmt.Sprintf("Difficulty(%d)", i)
	}
	return _DifficultyName[_DifficultyIndex[i]:_DifficultyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DifficultyNoOp() {
	var x [1]struct{}
	_ = x[DifficultyNoviceHistorian-(0)]
	_ = x[DifficultyAvidHistorian-(1)]
	_ = x[DifficultyHistoryScholar-(2)]
}

var _DifficultyValues = []Difficulty{DifficultyNoviceHistorian, DifficultyAvidHistorian, DifficultyHistoryScholar}

var _DifficultyNameToValueMap = map[string]Difficulty{
	_DifficultyName[0:16]:       DifficultyNoviceHistorian,
	_DifficultyLowerName[0:16]:  DifficultyNoviceHistorian,
	_DifficultyName[16:30]:      DifficultyAvidHistorian,
	_DifficultyLowerName[16:30]: DifficultyAvidHistorian,
	_DifficultyName[30:45]:      DifficultyHistoryScholar,
	_DifficultyLowerName[30:45]: DifficultyHistoryScholar,
}

var _DifficultyNames = []string{
	_DifficultyName[0:16],
	_DifficultyName[16:30],
	_DifficultyName[30:45],
}

// DifficultyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DifficultyString(s string) (Difficulty, error) {
	if val, ok := _DifficultyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DifficultyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Difficulty values", s)
}

// DifficultyValues returns all values of the enum
func DifficultyValues() []Difficulty {
	return _DifficultyValues
}

// DifficultyStrings returns a slice of all String values of the enum
func DifficultyStrings() []string {
	strs := make([]string, len(_DifficultyNames))
	copy(strs, _DifficultyNames)
	return strs
}

// IsADifficulty returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Difficulty) IsADifficulty() bool {
	for _, v := range _DifficultyValues {
		if i == v {
			return true
		}
	}
	return false
}
